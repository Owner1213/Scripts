-- AutoShoot

-- TOGGLES --
getgenv().LaserGunConnectivity = true -- if your gun is one of these guns please make your gun true and the rest false.
getgenv().RayGunConnectivity = true
getgenv().NailGunConnectivity = true
getgenv().RocketLauncherConnectivity = true

--END OF TOGGLES--


-- Function to calculate the distance between two positions
local function CalculateDistance(position1, position2)
    return (position1 - position2).Magnitude
end

-- Function to handle shooting at the nearest enemy
local function ShootAtNearestEnemy(remote, enemy)
    -- Create the arguments for the remote
    local args = {
        [1] = enemy.HumanoidRootPart.Position
    }

    -- Fire the remote for the nearest enemy
    remote:FireServer(unpack(args))
end

spawn(function()
    if LaserGunConnectivity == true then
        local remote = game:GetService("Players").LocalPlayer.Character.DebugGun.MouseEvent

        while true do
            -- Search for the "Enemies" folder in the workspace
            local enemiesFolder = game.Workspace:FindFirstChild("Enemies")

            -- Check if the "Enemies" folder exists
            if enemiesFolder and enemiesFolder:IsA("Folder") then
                -- Get the player's character
                local playerCharacter = game.Players.LocalPlayer.Character

                -- Sort enemies based on distance to player
                local enemies = enemiesFolder:GetChildren()
                table.sort(enemies, function(a, b)
                    local distanceToA = CalculateDistance(a.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                    local distanceToB = CalculateDistance(b.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                    return distanceToA < distanceToB
                end)

                -- Shoot at the nearest enemy
                if #enemies > 0 then
                    local nearestEnemy = enemies[1]
                    local success, error = pcall(ShootAtNearestEnemy, remote, nearestEnemy)
                    if not success then
                        warn("Error occurred while shooting at nearest enemy:", error)
                    end
                end
            end

            wait(0.1) -- Adjust the interval as desired
        end
    end
end)

spawn(function()
    if RayGunConnectivity == true then
        local remote = game:GetService("Players").LocalPlayer.Character.Raygun.MouseEvent

        while true do
            -- Search for the "Enemies" folder in the workspace
            local enemiesFolder = game.Workspace:FindFirstChild("Enemies")

            -- Check if the "Enemies" folder exists
            if enemiesFolder and enemiesFolder:IsA("Folder") then
                -- Get the player's character
                local playerCharacter = game.Players.LocalPlayer.Character

                -- Sort enemies based on distance to player
                local enemies = enemiesFolder:GetChildren()
                table.sort(enemies, function(a, b)
                    local distanceToA = CalculateDistance(a.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                    local distanceToB = CalculateDistance(b.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                    return distanceToA < distanceToB
                end)

                -- Shoot at the nearest enemy
                if #enemies > 0 then
                    local nearestEnemy = enemies[1]
                    local success, error = pcall(ShootAtNearestEnemy, remote, nearestEnemy)
                    if not success then
                        warn("Error occurred while shooting at nearest enemy:", error)
                    end
                end
            end

            wait(0.1) -- Adjust the interval as desired
        end
    end
end)

spawn(function()
    if NailGunConnectivity == true then 
        -- Function to calculate the distance between two positions
        local function CalculateDistance(position1, position2)
            return (position1 - position2).Magnitude
        end

        -- Continuously listen for changes in the "Enemies" folder
        coroutine.wrap(function()
            while true do
                -- Search for the "Enemies" folder in the workspace
                local enemiesFolder = workspace:FindFirstChild("Enemies")

                -- Check if the "Enemies" folder exists
                if enemiesFolder and enemiesFolder:IsA("Folder") then
                    -- Get the remote
                    local remote = game:GetService("Players").LocalPlayer.Character.Nailgun.MouseEvent

                    -- Check if the remote exists
                    if remote then
                        -- Get the player's character
                        local playerCharacter = game.Players.LocalPlayer.Character

                        -- Sort enemies based on distance to player
                        local enemies = enemiesFolder:GetChildren()
                        table.sort(enemies, function(a, b)
                            local distanceToA = CalculateDistance(a.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                            local distanceToB = CalculateDistance(b.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                            return distanceToA < distanceToB
                        end)

                        -- Shoot at the nearest enemy
                        if #enemies > 0 then
                            local nearestEnemy = enemies[1]
                            local args = {
                                [1] = nearestEnemy.HumanoidRootPart.Position
                            }
                            remote:FireServer(unpack(args))
                        end
                    end
                end

                -- Wait for a short interval before checking again
                wait(0.1) -- Adjust the interval as desired
            end
        end)()

    end
end)

spawn(function()
    if RocketLauncherConnectivity == true then
        -- Function to calculate the distance between two positions
        local function CalculateDistance(position1, position2)
            return (position1 - position2).Magnitude
        end

        -- Function to shoot at the nearest enemy
        local function ShootAtNearestEnemy(remote, enemies)
            -- Get the player's character
            local playerCharacter = game.Players.LocalPlayer.Character

            -- Sort enemies based on distance to player
            table.sort(enemies, function(a, b)
                local distanceToA = CalculateDistance(a.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                local distanceToB = CalculateDistance(b.HumanoidRootPart.Position, playerCharacter.HumanoidRootPart.Position)
                return distanceToA < distanceToB
            end)

            -- Check if there is a nearest enemy
            if #enemies > 0 then
                -- Shoot at the nearest enemy
                local nearestEnemy = enemies[1]
                local args = {
                    [1] = nearestEnemy.HumanoidRootPart.Position
                }
                remote:FireServer(unpack(args))
            end
        end

        -- Continuously listen for changes in the "Enemies" folder
        coroutine.wrap(function()
            while true do
                -- Search for the "Enemies" folder in the workspace
                local enemiesFolder = workspace:FindFirstChild("Enemies")

                -- Check if the "Enemies" folder exists
                if enemiesFolder and enemiesFolder:IsA("Folder") then
                    -- Get the remote
                    local remote = game:GetService("Players").LocalPlayer.Character.Rocket.MouseEvent

                    -- Check if the remote exists
                    if remote then
                        -- Get the enemies in the folder
                        local enemies = enemiesFolder:GetChildren()

                        -- Shoot at the nearest enemy
                        ShootAtNearestEnemy(remote, enemies)
                    end
                end

                -- Wait for a short interval before checking again
                wait(0.1) -- Adjust the interval as desired
            end
        end)()
    end
end)
